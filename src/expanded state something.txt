        <div style={{ height: '100%', overflow: 'auto' }}>
                <table style={{ border: '1px solid black', margin: '20px' }}>
                    <thead>
                        {table.getHeaderGroups().map((headerGroup) => (
                            <tr key={headerGroup.id}>
                                {headerGroup.headers.map((header) => (
                                    <th key={header.id} style={{ padding: '10px' }}>
                                        {header.isPlaceholder
                                            ? null
                                            : flexRender(header.column.columnDef.header, header.getContext())}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>

                    <tbody>
                        {table.getRowModel().rows.map((row) => {
                            return (
                                <React.Fragment key={row.id}>
                                    {/* Render main row */}
                                    <tr>
                                        {row.getVisibleCells().map((cell) => (
                                            <td
                                                key={cell.id}
                                                style={{
                                                    background: cell.getIsGrouped()
                                                        ? '#0aff0082'
                                                        : cell.getIsAggregated()
                                                            ? '#ffa50078'
                                                            : cell.getIsPlaceholder()
                                                                ? '#ff000042'
                                                                : 'white',
                                                }}
                                            >
                                                {cell.getIsGrouped() ? (
                                                    <>
                                                        <button
                                                            onClick={row.getToggleExpandedHandler()}
                                                            style={{ cursor: row.getCanExpand() ? 'pointer' : 'normal' }}
                                                        >
                                                            {row.getIsExpanded() ? 'ðŸ‘‡' : 'ðŸ‘‰'}{' '}
                                                            {flexRender(cell.column.columnDef.cell, cell.getContext())}{' '}
                                                            ({row.subRows.length})
                                                        </button>
                                                    </>
                                                ) : cell.getIsAggregated() ? (
                                                    flexRender(
                                                        cell.column.columnDef.aggregatedCell ?? cell.column.columnDef.cell,
                                                        cell.getContext()
                                                    )
                                                ) : cell.getIsPlaceholder() ? null : (
                                                    flexRender(cell.column.columnDef.cell, cell.getContext())
                                                )}
                                            </td>
                                        ))}
                                    </tr>
                                    {/* Render expanded rows */}
                                    {row.getIsExpanded() && (
                                        <tr>
                                            <td colSpan={table.getAllColumns().length}>
                                                {/* Render breakdown of total */}
                                                {Object.keys(row.original).map((key) => (
                                                    <div key={key}>
                                                        <strong>{key}:</strong> {row.original[key]}
                                                    </div>
                                                ))}
                                            </td>
                                        </tr>
                                    )}
                                </React.Fragment>
                            );
                        })}
                    </tbody>
                </table>
            </div>